
basic types
  bool
  int<comtime data>//always signed
  data<comtime data>//always unsigned
  //need match length.


advanced type
  T*
  T[]
  T&
  T&&
  
  
  const   //cannot be change.
  meta    //prototype of thing,need to be specify afterward.
  comtime //thing exised at compile time
  runtime //thing exised at run time
  
  
  /*
    meta allow you do a quick sort function.
    comtime allow you use qsort to sort data in compile time.
    runtime allow you use qsort in exection.
  */
  
  
  
  
  
 runtime type
  Object  //thing with variable length
  list

custom type
  struct  //a layout of data<>
  class   //a layout of Object
  











----




func hello_world_program()=print("hello world");


func hw_longer()=
{
	print("hello world");
	print("this is second line");
	return;
};




func fib(data)->(data);//declare

func fib(0)->(1);//single case definition
func fib(1)->(1);

func fib(data inx)->(data output=fib(inx-1)+fib(inx-2));//common case definition


let fib_2=func(int inx)->(int=fib_2(inx-1)+fib_2(inx-2));

run meta 
	for(int& i in range(0,1))
		fib_2+=func(i)->(1);
